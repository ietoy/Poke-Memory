{"version":3,"sources":["components/Banner.js","components/Footer.js","components/Game.js","components/Tile.js","App.js","serviceWorker.js","index.js"],"names":["Banner","props","className","bannerText","curScore","topScore","Footer","Game","children","Tile","id","name","src","img","alt","onClick","handleClick","App","state","pokemon","clickedPkmn","pokeShuffle","newInd","i","length","Math","floor","random","temp","setState","includes","newScore","this","map","pkmn","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oqDA2BeA,MAzBf,SAAgBC,GACZ,OACI,6BACI,yBAAKC,UAAU,gBACX,6BACI,yBAAKA,UAAU,yBAEX,yBAAKA,UAAU,QAAQD,EAAME,YAC7B,yBAAKD,UAAU,SAAf,eAAoCD,EAAMG,SAA1C,iBAAkEH,EAAMI,aAKpF,yBAAKH,UAAU,OACX,yBAAKA,UAAU,gCACX,0BAAMA,UAAU,cAChB,4CADA,iFCDLI,MAdf,WACI,OACI,6BACI,4BAAQJ,UAAU,eACd,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,aAAf,oBCDLK,MAJf,SAAcN,GACZ,OAAO,yBAAKC,UAAU,yBAAyBD,EAAMO,WCaxCC,MAdf,SAAcR,GAEV,OACI,yBAAKC,UAAU,gBAAgBQ,GAAIT,EAAMU,MACrC,yBACIT,UAAU,qCACVU,IAAKX,EAAMY,IACXC,IAAKb,EAAMU,KACXI,QAAS,kBAAMd,EAAMe,YAAYf,EAAMS,S,OC6DxCO,E,2MA7DbC,MAAQ,CACNf,WAAY,4BACZE,SAAU,EACVD,SAAU,EACVe,UACAC,YAAa,I,EAGfC,YAAc,SAAAF,GAEZ,IADA,IAAIG,EACKC,EAAIJ,EAAQK,OAAQ,EAAGD,EAAI,EAAGA,IAAK,CAC1CD,EAASG,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACzC,IAAIK,EAAOT,EAAQI,GACnBJ,EAAQI,GAAKJ,EAAQG,GACrBH,EAAQG,GAAUM,EAEpB,EAAKC,SAAS,CAAEV,a,EAGlBH,YAAc,SAAAN,GACZ,GAAI,EAAKQ,MAAME,YAAYU,SAASpB,GAC9B,EAAKQ,MAAMd,SAAW,EAAKc,MAAMb,UACnC,EAAKwB,SAAS,CAAExB,SAAU,EAAKa,MAAMd,WAEvC,EAAKyB,SAAS,CAAE1B,WAAY,oDAC5B,EAAK0B,SAAS,CAAET,YAAa,KAC7B,EAAKS,SAAS,CAAEzB,SAAU,QACrB,CACL,EAAKyB,SAAS,CAAE1B,WAAY,uCAC5B,EAAK0B,SAAS,CAAET,YAAY,GAAD,mBAAM,EAAKF,MAAME,aAAjB,CAA8BV,MACzD,IAAIqB,EAAW,EAAKb,MAAMd,SAAW,EACrC,EAAKyB,SAAS,CAAEzB,SAAU2B,IAE5B,EAAKV,YAAY,EAAKH,MAAMC,U,wEAGpB,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEhB,WAAY6B,KAAKd,MAAMf,WACvBC,SAAU4B,KAAKd,MAAMd,SACrBC,SAAU2B,KAAKd,MAAMb,WAEvB,kBAAC,EAAD,KACG2B,KAAKd,MAAMC,QAAQc,KAAI,SAAAC,GAAI,OAC1B,kBAAC,EAAD,CACExB,GAAIwB,EAAKxB,GACTyB,IAAKD,EAAKxB,GACVC,KAAMuB,EAAKvB,KACXE,IAAKqB,EAAKrB,IACVG,YAAa,EAAKA,kBAIxB,kBAAC,EAAD,W,GAzDUoB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.69026182.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Banner(props) {\r\n    return (\r\n        <div>\r\n            <div className=\"navbar-fixed\">\r\n                <nav>\r\n                    <div className=\"nav-wrapper container\">\r\n                        {/* click response will show here */}\r\n                        <div className=\"left\">{props.bannerText}</div>\r\n                        <div className=\"right\">Your Score: {props.curScore} | Top Score: {props.topScore}</div>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"card-panel teal center-align\">\r\n                    <span className=\"white-text\">\r\n                    <h1>Poke-Memory!</h1>\r\n                    Click on a Pokemon to earn points, but don't click on any more than once!\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>    \r\n    );\r\n}\r\n\r\nexport default Banner;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div>\r\n            <footer className=\"page-footer\">\r\n                <div className=\"footer-copyright\">\r\n                    <div className=\"container\">\r\n                        Poke-Memory!\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\n\r\nfunction Game(props) {\r\n  return <div className=\"wrapper container row\">{props.children}</div>\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\n\r\nfunction Tile(props) {\r\n\r\n    return (\r\n        <div className=\"col s12 m6 l3\" id={props.name}>\r\n            <img\r\n                className=\"responsive-img z-depth-2 hoverable\"\r\n                src={props.img}\r\n                alt={props.name}\r\n                onClick={() => props.handleClick(props.id)}    \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tile;","import React, { Component } from 'react';\nimport './App.css';\nimport Banner from \"./components/Banner\";\nimport Footer from \"./components/Footer\";\nimport Game from './components/Game';\nimport Tile from \"./components/Tile\"\nimport pokemon from \"./pokemon.json\";\n\nclass App extends Component {\n\n  state = {\n    bannerText: \"Click a Pokemon to Start!\",\n    topScore: 0,\n    curScore: 0,\n    pokemon,\n    clickedPkmn: []\n  }\n \n  pokeShuffle = pokemon => {\n    var newInd;\n    for (var i = pokemon.length -1; i > 0; i--) {\n      newInd = Math.floor(Math.random() * (i + 1))\n      var temp = pokemon[i];\n      pokemon[i] = pokemon[newInd];\n      pokemon[newInd] = temp;\n    }\n    this.setState({ pokemon })\n  }\n\n  handleClick = id => {\n    if (this.state.clickedPkmn.includes(id)) {\n      if (this.state.curScore > this.state.topScore) {\n        this.setState({ topScore: this.state.curScore })\n      }\n      this.setState({ bannerText: \"Oh no! You clicked that one already! Try again?\" })\n      this.setState({ clickedPkmn: [] });\n      this.setState({ curScore: 0 });\n    } else {\n      this.setState({ bannerText: \"You guessed correctly! Keep going!\"})\n      this.setState({ clickedPkmn: [...this.state.clickedPkmn, id]});\n      var newScore = this.state.curScore + 1;\n      this.setState({ curScore: newScore});\n    }\n    this.pokeShuffle(this.state.pokemon)\n  };\n\n  render() {\n    return (\n      <div>\n        <Banner \n          bannerText={this.state.bannerText}\n          curScore={this.state.curScore}\n          topScore={this.state.topScore}\n        />\n        <Game>\n          {this.state.pokemon.map(pkmn => (\n            <Tile\n              id={pkmn.id}\n              key={pkmn.id}\n              name={pkmn.name}\n              img={pkmn.img}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </Game>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}